else if ((positsioon3 == 0 || positsioon3 == 2) && lastDiskState2 != positsioon3){
      Serial.println("peatumine algab");
      lastDiskState2 = positsioon3; 
      int64_t peatumisVahemaa;
      long int asukoht = stepper3->getCurrentPosition();
      int hetkKiirus = stepper3->getCurrentSpeedInMilliHz() / 1000;
      int64_t ruudus = (hetkKiirus * hetkKiirus) / 1000;
      Serial.print("current speed in milliHz: ");
      Serial.println(stepper3->getCurrentSpeedInMilliHz());
      Serial.print("kiirus ruudus jagatud tuhandega ");
      Serial.println(ruudus);
      stepper4->getPositionAfterCommandsCompleted();
      peatumisVahemaa = ruudus / 48;
      Serial.print("sq-hetkKiirus: ");
      Serial.println(sq(hetkKiirus));
      Serial.print("hetkKiirus * hetkKiirus: ");
      Serial.println(hetkKiirus * hetkKiirus);
      Serial.print("asukoht: ");
      Serial.println(asukoht);
      Serial.print("hetkKiirus: ");
      Serial.println(hetkKiirus);
      Serial.print("peatumisVahemaa: ");
      Serial.println(peatumisVahemaa);

      if(stepper3->getCurrentSpeedInMilliHz() > 0){  
        Serial.println("speed > 0");
        int minAbsSeiskumispunkt = (asukoht % 6400) + abs(peatumisVahemaa);
        Serial.print("minAbsSeiskumispunkt: ");
        Serial.println(minAbsSeiskumispunkt);
        stepper3->move(3200 - (minAbsSeiskumispunkt % 3200) + abs(peatumisVahemaa));
        //stepper3->move(3200 + (minAbsSeiskumispunkt % 3200));
        }
      if(stepper3->getCurrentSpeedInMilliHz() < 0){ 
        Serial.println("speed < 0");
        int minAbsSeiskumispunkt = (-1*(asukoht % 3200)) - (peatumisVahemaa);
       Serial.print("minAbsSeiskumispunkt: ");
        Serial.println(minAbsSeiskumispunkt);
        stepper3->move((3200 - (minAbsSeiskumispunkt % 3200) + abs(peatumisVahemaa) + (hetkKiirus / 50)) * -1);
        //stepper3->move((6400 - (minAbsSeiskumispunkt % 6400) - abs(peatumisVahemaa) + (hetkKiirus / 50)) * -1);
        }
      Serial.println();
    }  